pipeline {
    agent none

    stages {
        stage('Get Code') {
            agent any
            steps {
                sh '''
                    whoami
                    hostname
                '''
                git url: 'https://github.com/albertmenendezg/UNIR-CP1.D', branch: 'develop'
                stash includes: '**', name: 'workspace'
            }
        }

        stage('Static Test') {
            agent {
                label 'static-tests'
            }
            steps {
                unstash 'workspace'
                catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                    sh '''
                        whoami
                        hostname
                        mkdir -p reports
                        bandit --exit-zero -r src -f custom -o reports/bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                        flake8 --exit-zero --format=pylint src > reports/flake8.out
                    '''
                    recordIssues tools: [
                        pyLint(name: 'Bandit', pattern: 'reports/bandit.out'),
                        flake8(name: 'Flake8', pattern: 'reports/flake8.out')
                    ]
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'reports/**', allowEmptyArchive: true
                }
            }
        }

        stage('Deploy') {
            agent any
            steps {
                unstash 'workspace'
                sh '''
                    whoami
                    hostname
                    sam build
                    sam validate --region us-east-1
                    sam deploy --config-env staging --no-confirm-changeset --force-upload --no-fail-on-empty-changeset --no-progressbar
                    API_URL=$(aws cloudformation describe-stacks --stack-name todo-list-aws-staging --query "Stacks[0].Outputs[?OutputKey=='BaseUrlApi'].OutputValue" --output text)
                    echo "BASE_URL=$API_URL" > .env
                    cat .env
                '''
                stash includes: '.env', name: 'env'
            }
        }

        stage('Rest Test') {
            agent {
                label 'rest-tests'
            }
            steps {
                unstash 'workspace'
                unstash 'env'
                sh '''
                    whoami
                    hostname
                    export $(cat .env)
                    echo "BASE_URL=$BASE_URL"
                    pytest test/integration/todoApiTest.py
                '''
            }
        }

        stage('Promote') {
            agent any
            steps {
                sshagent(['github-ssh-key']) {
                    sh '''
                        whoami
                        hostname
                        git fetch origin develop
                        git checkout master
                        git pull origin master
                        git merge develop
                        git push origin master
                    '''
                }
            }
        }
    }
}
